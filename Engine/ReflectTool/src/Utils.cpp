#include "Utils.h"

#include <filesystem>
#include <Reflect.h>

namespace InsightReflectTool
{
    namespace Utils
    {
        void WriteGeneratedFileHeader(std::fstream& file)
        {
            if (file.is_open())
            {
                file << "// THIS FILE IS AUTO GENERATED BY THE INSIGHT REFLECT TOOL. ANY MODIFICATIONS WILL BE OVERWRITTEN." << "\n";
                file << "#pragma once" << "\n" << "\n";
            }
        }

        void WriteIncludeFile(std::fstream& file, std::string_view includeFile)
        {
            file << "#include \"";
            file << includeFile;
            file << "\"\n";
        }

        void WriteIncludeFiles(std::fstream& file, std::string_view fileOutputAbsPath, const std::vector<std::string>& filesToInclude)
        {
            for (const std::string& filePath : filesToInclude)
            {
                std::string includePath = std::filesystem::canonical(filePath).generic_string();
                std::string relativeIncludePath = std::filesystem::relative(includePath, fileOutputAbsPath).generic_string();
                WriteIncludeFile(file, relativeIncludePath);
            }
        }

        void WriteIncludeLibraryFile(std::fstream& file, std::string_view includeFile)
        {
            file << "#include <";
            file << includeFile;
            file << ">\n";
        }

        void WriteHeaderFunctionDeclaration(std::fstream& file, std::string_view returnValue, std::string_view functionName, std::vector<std::string_view> arguments, int indent)
        {
        }

        void WriteSourceFunctionDefinition(std::fstream& file, std::string_view returnValue, std::string_view functionName, std::vector<std::string_view> arguments, WriteSourceFunctionBodyFunc func, int indent)
        {
            TAB_N(indent);
            file << returnValue << " " << functionName << "(";
            for (const std::string_view& view : arguments)
            {
                file << view;
                if (view != arguments.back())
                {
                    file << ", ";
                }
            }
            file << ")" << NEW_LINE;

            TAB_N(indent);
            file << "{" << NEW_LINE;

            func(file);

            TAB_N(indent);
            file << "}" << NEW_LINE << NEW_LINE;
        }

        void ValidateOutputPath(std::string_view path)
        {
            std::string folderPath = std::filesystem::path(path).parent_path().string();
            if (!std::filesystem::exists(folderPath))
            {
                std::filesystem::create_directories(folderPath);
            }
        }
    }
}